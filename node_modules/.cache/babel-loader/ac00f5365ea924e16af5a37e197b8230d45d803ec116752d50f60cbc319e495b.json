{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchTextData } from '../api/fetchTextData';\n\n// /. imports\n\n// /. interfaces\n\nconst initialState = {\n  subtitleText: '',\n  requestStatus: '',\n  requestError: null,\n  isBurgerVisible: false\n};\n\n// /. initialState\n\nconst mainSlice = createSlice({\n  name: 'mainSlice',\n  initialState,\n  reducers: {\n    swithBurgerVisibleStatus(state, action) {\n      state.isBurgerVisible = action.payload;\n    }\n  },\n  // extraReducers: {\n  //     [fetchTextData.pending.type]: state => {\n  //         state.requestStatus = 'loading';\n  //     },\n  //     [fetchTextData.fulfilled.type]: (\n  //         state,\n  //         action: PayloadAction<string[]>\n  //     ) => {\n  //         state.requestStatus = 'success';\n  //         state.requestError = null;\n  //         state.subtitleText = action.payload[0];\n  //     },\n  //     [fetchTextData.rejected.type]: (\n  //         state,\n  //         action: PayloadAction<null | string>\n  //     ) => {\n  //         state.requestStatus = 'failed';\n  //         state.requestError = action.payload;\n  //     }\n  // }\n  extraReducers: builder => {\n    builder.addCase(fetchTextData.pending, state => {\n      state.requestStatus = 'loading';\n    }).addCase(fetchTextData.fulfilled, (state, action) => {\n      state.requestStatus = 'success';\n      state.requestError = null;\n      state.subtitleText = action.payload[0];\n    }).addCase(fetchTextData.rejected, (state, action) => {\n      state.requestStatus = 'failed';\n      if (action.payload) {\n        state.requestError = action.payload;\n      }\n    });\n  }\n});\nexport const {\n  swithBurgerVisibleStatus\n} = mainSlice.actions;\nexport default mainSlice.reducer;","map":{"version":3,"names":["createSlice","fetchTextData","initialState","subtitleText","requestStatus","requestError","isBurgerVisible","mainSlice","name","reducers","swithBurgerVisibleStatus","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/paulosampaio/Desktop/Paulos-Portifolio /Front-End-Bank-Aplication/src/app/slices/mainSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { fetchTextData } from '../api/fetchTextData';\n\n// /. imports\n\ninterface mainSliceTypes {\n    subtitleText: string;\n    requestStatus: string;\n    requestError: any;\n    isBurgerVisible: boolean;\n}\n\n// /. interfaces\n\nconst initialState: mainSliceTypes = {\n    subtitleText: '',\n    requestStatus: '',\n    requestError: null,\n    isBurgerVisible: false\n};\n\n// /. initialState\n\nconst mainSlice = createSlice({\n    name: 'mainSlice',\n    initialState,\n    reducers: {\n        swithBurgerVisibleStatus(state, action: PayloadAction<boolean>) {\n            state.isBurgerVisible = action.payload;\n        }\n    },\n    // extraReducers: {\n    //     [fetchTextData.pending.type]: state => {\n    //         state.requestStatus = 'loading';\n    //     },\n    //     [fetchTextData.fulfilled.type]: (\n    //         state,\n    //         action: PayloadAction<string[]>\n    //     ) => {\n    //         state.requestStatus = 'success';\n    //         state.requestError = null;\n    //         state.subtitleText = action.payload[0];\n    //     },\n    //     [fetchTextData.rejected.type]: (\n    //         state,\n    //         action: PayloadAction<null | string>\n    //     ) => {\n    //         state.requestStatus = 'failed';\n    //         state.requestError = action.payload;\n    //     }\n    // }\n    extraReducers: builder => {\n        builder\n            .addCase(fetchTextData.pending, state => {\n                state.requestStatus = 'loading';\n            })\n            .addCase(fetchTextData.fulfilled, (state, action) => {\n                state.requestStatus = 'success';\n                state.requestError = null;\n                state.subtitleText = action.payload[0];\n            })\n            .addCase(fetchTextData.rejected, (state, action) => {\n                state.requestStatus = 'failed';\n                if (action.payload) {\n                    state.requestError = action.payload;\n                }\n            });\n    }\n});\n\nexport const { swithBurgerVisibleStatus } = mainSlice.actions;\n\nexport default mainSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,aAAa,QAAQ,sBAAsB;;AAEpD;;AASA;;AAEA,MAAMC,YAA4B,GAAG;EACjCC,YAAY,EAAE,EAAE;EAChBC,aAAa,EAAE,EAAE;EACjBC,YAAY,EAAE,IAAI;EAClBC,eAAe,EAAE;AACrB,CAAC;;AAED;;AAEA,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BQ,IAAI,EAAE,WAAW;EACjBN,YAAY;EACZO,QAAQ,EAAE;IACNC,wBAAwB,CAACC,KAAK,EAAEC,MAA8B,EAAE;MAC5DD,KAAK,CAACL,eAAe,GAAGM,MAAM,CAACC,OAAO;IAC1C;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,aAAa,EAAEC,OAAO,IAAI;IACtBA,OAAO,CACFC,OAAO,CAACf,aAAa,CAACgB,OAAO,EAAEN,KAAK,IAAI;MACrCA,KAAK,CAACP,aAAa,GAAG,SAAS;IACnC,CAAC,CAAC,CACDY,OAAO,CAACf,aAAa,CAACiB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACP,aAAa,GAAG,SAAS;MAC/BO,KAAK,CAACN,YAAY,GAAG,IAAI;MACzBM,KAAK,CAACR,YAAY,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CACDG,OAAO,CAACf,aAAa,CAACkB,QAAQ,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACP,aAAa,GAAG,QAAQ;MAC9B,IAAIQ,MAAM,CAACC,OAAO,EAAE;QAChBF,KAAK,CAACN,YAAY,GAAGO,MAAM,CAACC,OAAO;MACvC;IACJ,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAyB,CAAC,GAAGH,SAAS,CAACa,OAAO;AAE7D,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}